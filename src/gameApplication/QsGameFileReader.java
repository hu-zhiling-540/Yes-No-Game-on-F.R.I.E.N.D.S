package gameApplication;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.*;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

//import datastructures.QsGameNode;
//import datastructures.QsGameTree;

import org.w3c.dom.*;

/**
 * A class that reads from xml file
 * @author Zhiling
 *
 */
public class QsGameFileReader	{

	public static QsGameTree tree;
	
	
	/**
	 * Takes in document and returns a tree
	 * @param file
	 * @return
	 */
	public static QsGameTree readXML(String file)	{
		//Setup XML Document
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		
		try	{
			File xmlFile = new File( file );
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse( xmlFile );
			
			return parseXML( document );
		}

		catch (SAXParseException spe)	{
			// Error generated by the parser
			System.out.println("SAXParse");
		}
		catch (SAXException sxe) 	{
			//if any parse errors occur.
			System.out.println("SAX");
		}
		catch (ParserConfigurationException pce)	{
			System.out.println("confi");
        }
        catch (IOException ioe)		{
            // I/O error
        	System.out.println("I/o");
        }
		catch (ArrayIndexOutOfBoundsException aiobe)	{
			// array out of bound
	        System.out.println("Out of bound");
		}
		
		return null;
		
	}

	
	/**
	 * Pareses XML file
	 * Finds the root and start parsing node from the root
	 * @param document
	 * @return
	 */
	private static QsGameTree parseXML(Document document)	{
		
		QsGameTree myTree = new QsGameTree();
		
		Element docRoot =  (Element)document.getDocumentElement();
		myTree.setRoot(parseGameNode(docRoot));
		
		return myTree;
	}

	
	/**
	 * Parses an element
	 * @param ele
	 * @return
	 */
	private static QsGameNode parseGameNode(Element ele)	{	
		// if it is a leaf, which means it is an answer
		if (ele.getNodeName().equals("answer"))		{	
			
			String answer = ele.getAttribute("statement");
			QsGameNode answerNode = new QsGameNode();
			answerNode.setData(answer);
			
			return answerNode;
		}
		
		else	{
			
			QsGameNode yes = null;
			QsGameNode no = null;
			String question = "";
			
			NodeList childNodes = ele.getChildNodes();
			
			question = ele.getAttribute( "statement" );
	        for ( int i = 0; i < childNodes.getLength(); i++ )	{
	        	if (childNodes.item(i) instanceof Element)	{
	        		Element childNode = (Element)childNodes.item(i);
	        		
	        		// if left is not filled
	        		if (yes == null)	{
	        			yes = parseGameNode(childNode);
	        		}
	        		// if right is not filled
	        		else	{
	        			no = parseGameNode(childNode);
	        		}
	        	}
			}
	        
	        QsGameNode gameNode = new QsGameNode();
	        gameNode.setData(question);
	        
	        gameNode.setLeftChild(yes);
	        gameNode.setRightChild(no);
	        
	        return gameNode;
		}
	}
	
}
